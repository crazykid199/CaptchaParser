var sols = ["HNTE6",
"LE3T6",
"767J4",
"47T4F",
"MXPPU",
"T7MUM",
"3JE96",
"NEHMH",
"UTJE6",
"76FXL",
"F77NL",
"NN3XQ",
"RF4TL",
"3LDXQ",
"YJA64",
"PRKAF",
"UQULM",
"X6FEX",
"UKE6A",
"3HRYK",
"QU46U",
"MUM4Q",
"HLL6N",
"MKJR4",
"MFMA4",
"N9HKF",
"7Y9T3",
"3QHUK",
"KUULU",
"EJ9DQ",
"AHXAE",
"TKQHT",
"6FF4F",
"PJFHP",
"QDA4F",
"QL9FX",
"3HKDK",
"HLN76",
"DD6AQ",
"396Y9",
"LKNXJ",
"FYLRJ",
"LPLQ6",
"D4NA6",
"TFTHT",
"66URK",
"3769D",
"M7J6L",
"9F434",
"MFJ4A",
"P436A",
"KRLXK",
"K6KFN",
"6YR7A",
"HE9F6",
"LPXFY",
"HJEQF",
"4QEU9",
"DJAMT",
"9DAPU",
"QALUM",
"JY3RA",
"F6L3N",
"JHDNT",
"T7LQX",
"HQ9E9",
"DLRN6",
"XMRM4",
"PP46H",
"RJQRM",
"JNXFL",
"TRXUL",
"U9JMT",
"F7M6L",
"UN9JN",
"HJ4EL",
"977DU",
"AAEXD",
"R9MR9",
"KJJT6",
"HDPDP",
"6LUMR",
"XR4LQ",
"PEA3T",
"99HEQ",
"9TPY4",
"XR76P",
"7AE47",
"79JNM",
"9NHPD",
"9LRFY",
"XTFAA",
"3Q3X9",
"3UEXU",
"X9UXR",
"E4Y6P",
"RY3Y7",
"UEAJ7",
"XULAY",
"J3MR7",]

keys = {
    "A": [
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,2,0,0,0,1,1,1,1,0,0,0,2,0,0,0,0],
    [0,0,0,0,2,0,0,0,0,1,1,1,1,1,0,0,0,2,0,0,0],
    [0,0,0,2,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,0,0],
    [0,0,2,2,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,2,0],
    [0,0,2,2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,2,2,0],
    [0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [0,0,0,0,0,1,1,1,0,0,2,0,0,1,1,1,1,0,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,2,0,0,1,1,1,1,0,0,0,0],
    [0,0,0,0,1,1,1,0,0,2,2,0,0,1,1,1,1,1,0,0,0],
    [0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0],
    [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
    [0,1,1,1,1,0,0,0,0,0,2,0,0,0,0,0,1,1,1,1,0],
    [0,1,1,1,0,0,0,0,2,0,0,0,2,0,0,0,1,1,1,1,0],
    [1,1,1,1,0,0,0,0,0,0,2,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,2,0,0,0,0,0,2,0,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,0,2,0,0,2,0,0,0,0,0,1,1,1,1]
    ],
    "D": [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,0],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0]
    ],
    "E": [
    [1,1,1,1,1,1,1,1,1,1,1,1,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1]
    ],
    "H": [
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1]
    ],
    "K": [
    [1,1,1,0,0,0,2,2,0,0,0,0,1,1,1,1,0],
    [1,1,1,0,0,0,2,2,0,0,0,1,1,1,1,0,0],
    [1,1,1,0,0,0,2,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,1,1,1,0,0,0,2,0,0],
    [1,1,1,0,0,0,0,1,1,1,0,0,0,2,2,0,0],
    [1,1,1,0,0,0,1,1,1,0,0,0,2,2,2,0,0],
    [1,1,1,0,0,1,1,1,1,0,0,0,2,2,2,0,0],
    [1,1,1,0,1,1,1,1,0,0,0,2,2,2,2,0,0],
    [1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,0,0],
    [1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,0,0],
    [1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,0,0],
    [1,1,1,0,1,1,1,1,1,0,0,0,2,2,2,0,0],
    [1,1,1,0,0,1,1,1,1,1,0,0,0,2,2,0,0],
    [1,1,1,0,0,1,1,1,1,1,0,0,0,2,2,0,0],
    [1,1,1,0,0,0,1,1,1,1,1,0,0,0,2,0,0],
    [1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,2,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,0,0,2,2,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,1]
    ],
    "M": [
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1],
    [1,1,1,1,1,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1],
    [1,1,1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,1,1,1,0,0,0,0,2,2,2,0,0,0,0,1,1,1,1,1],
    [1,1,1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,1,1],
    [1,1,1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,0,0,0,2,0,0,0,0,1,1,1,1,1,1],
    [1,1,0,1,1,1,1,0,0,0,2,0,0,0,1,1,1,0,1,1,1],
    [1,1,0,1,1,1,1,0,0,0,2,0,0,0,1,1,1,0,1,1,1],
    [1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1],
    [1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1],
    [1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1],
    [1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1],
    [1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1],
    [1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1],
    [1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1],
    [1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1],
    [1,1,0,0,2,0,0,1,1,1,1,1,1,0,0,2,0,0,1,1,1],
    [1,1,0,0,2,0,0,1,1,1,1,1,1,0,0,2,0,0,1,1,1],
    [1,1,0,0,2,0,0,0,1,1,1,1,0,0,0,2,0,0,1,1,1],
    [1,1,0,0,2,0,0,0,1,1,1,1,0,0,2,2,0,0,1,1,1],
    [1,1,0,0,2,2,0,0,0,0,0,0,0,0,2,2,0,0,1,1,1],
    [1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,1,1]
    ],
    "N": [
    [1,1,1,0,0,0,2,2,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,1,1,0,0,0,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,1,1,0,0,0,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,1,1,1,0,0,0,2,2,2,0,0,0,1,1],
    [1,1,0,1,1,1,1,1,0,0,0,2,2,0,0,0,1,1],
    [1,1,0,0,1,1,1,1,0,0,0,2,2,0,0,0,1,1],
    [1,1,0,0,1,1,1,1,1,0,0,0,2,0,0,0,1,1],
    [1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1],
    [1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1],
    [1,1,0,0,0,2,0,0,0,1,1,1,1,1,0,0,1,1],
    [1,1,0,0,0,2,2,0,0,0,1,1,1,1,0,0,1,1],
    [1,1,0,0,0,2,2,9,0,0,1,1,1,1,1,0,1,1],
    [1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,1,1,1],
    [1,1,0,0,0,2,2,2,2,0,0,0,1,1,1,1,1,1],
    [1,1,0,0,0,2,2,2,2,0,0,0,1,1,1,1,1,1],
    [1,1,0,0,0,2,2,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,0,0,0,2,2,2,2,2,2,0,0,0,1,1,1,1],
    [1,1,0,0,0,2,2,2,2,2,2,2,0,0,0,1,1,1]
    ],
    "Q": [
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0],
    [0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],
    [0,1,1,1,1,0,0,0,0,0,2,0,0,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,1,1,0,0,0,0,2,2,2,0,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,0,0,0,0,1,1,1,1,0,0],
    [1,1,1,1,1,0,0,0,0,2,2,2,0,0,0,0,1,1,1,1,1,0,0],
    [0,1,1,1,1,0,0,0,0,0,2,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0],
    [0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,2,2],
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2],
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2],
    [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0],
    [2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0],
    [2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,1,1,1,1,1,1,1,1],
    [2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,1,1,1,1,1,1],
    [2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,1,1,1,0]
    ],
    "R": [
    [1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,2,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,2,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,0,0,0],
    [1,1,1,0,0,2,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,2,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,0],
    [1,1,1,0,0,0,1,1,1,1,0,0,0,2,2,0],
    [1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0],
    [1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,2,0,0,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,2,0,0,1,1,1,1,1,0,0,0],
    [1,1,1,0,0,2,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1,0,0],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,2,2,2,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,2,2,2,2,0,0,0,1,1,1,1]
    ],
    "P": [
    [1,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,0],
    [1,1,1,0,0,0,1,1,1,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,0,0,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,1,1,1,1,1,1,1,1,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2],
    [1,1,1,0,0,0,2,2,2,2,2,2,2,2]
    ],
    "U": [
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,0,0,0,2,2,2,2,2,0,0,0,1,1],
    [1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,0,2,0,0,0,0,1,1,1],
    [0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],
    [0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0]
    ],
    "L": [
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,2,0,2,2,2,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,0,2,2],
    [1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1]
    ],
    "X": [
    [1,1,1,1,1,0,0,0,2,0,2,0,2,0,0,0,1,1,1,1],
    [0,1,1,1,1,1,0,0,2,2,0,2,2,0,0,0,1,1,1,0],
    [0,0,1,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,0,0],
    [0,0,1,1,1,1,1,0,0,0,2,0,0,0,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,1,0,0,2,0,0,0,1,1,1,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0],
    [0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0],
    [0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0],
    [0,0,2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,2,0,0],
    [0,2,2,2,0,0,0,1,1,1,1,1,1,0,0,0,2,2,2,0],
    [0,0,2,2,0,0,0,1,1,1,1,1,0,0,0,0,2,2,0,0],
    [0,0,2,2,0,0,0,0,1,1,1,1,1,0,0,0,2,2,0,0],
    [0,2,2,2,0,0,0,1,1,1,1,1,1,0,0,0,2,2,2,0],
    [0,0,2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,2,0,0],
    [0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0],
    [0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0],
    [0,0,0,1,1,1,0,0,0,2,0,0,1,1,1,1,1,0,0,0],
    [0,0,1,1,1,1,0,0,0,2,0,0,0,1,1,1,1,1,0,0],
    [0,0,1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1,0,0],
    [0,1,1,1,0,0,0,2,0,0,2,0,0,0,1,1,1,1,1,0],
    [1,1,1,1,0,0,0,2,0,2,0,2,0,0,0,1,1,1,1,1]
    ],
    "Y": [
    [1,1,1,1,0,0,0,2,0,2,2,0,2,0,0,0,1,1,1],
    [1,1,1,1,1,0,0,0,2,2,2,2,0,0,0,1,1,1,1],
    [0,1,1,1,1,1,0,0,2,0,0,2,0,0,0,1,1,1,0],
    [0,0,1,1,1,1,0,0,0,2,2,0,0,0,1,1,1,0,0],
    [0,0,1,1,1,1,1,0,0,2,2,0,0,1,1,1,1,0,0],
    [0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,0,0],
    [2,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,0,0,2],
    [0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0],
    [0,2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,2,0,0],
    [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0],
    [0,0,2,0,0,0,1,1,1,1,1,1,0,0,0,0,2,0,0],
    [0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,0,0,0,0],
    [0,0,2,0,0,0,0,0,1,1,1,0,0,0,0,0,2,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,0,0,0,1,1,1,0,0,0,2,0,0,0,0],
    [0,0,2,0,0,0,0,0,1,1,1,0,0,0,0,0,2,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,0,0,0,1,1,1,0,0,0,2,0,0,0,0],
    [0,0,2,0,0,0,0,0,1,1,1,0,0,0,0,0,2,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,0,0,0,1,1,1,0,0,0,2,0,0,0,0],
    [0,0,2,0,0,0,0,0,1,1,1,0,0,0,0,2,0,0,0]
    ],
    "3": [
    [1,1,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,0,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,1,1,1,1,0],
    [2,2,2,2,2,2,0,0,0,1,1,1,0],
    [2,2,2,2,2,0,0,0,1,1,1,1,0],
    [2,2,2,2,2,0,0,0,1,1,1,1,0],
    [2,0,0,0,0,0,0,0,1,1,1,1,0],
    [2,0,0,0,0,0,0,1,1,1,1,0,0],
    [2,0,0,0,1,1,1,1,1,1,1,0,0],
    [2,0,1,1,1,1,1,1,1,0,0,0,0],
    [2,0,1,1,1,1,1,1,1,1,1,0,0],
    [2,0,0,0,1,1,1,1,1,1,1,1,0],
    [2,0,0,0,0,0,0,0,1,1,1,1,1],
    [2,0,0,0,0,0,0,0,0,1,1,1,1],
    [2,2,2,2,2,2,0,0,0,1,1,1,1],
    [2,2,2,2,2,2,0,0,0,0,1,1,1],
    [2,2,2,2,2,2,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,1,0,0,1,1,1,1,1,1,0],
    [1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0]
    ],
    "4": [
    [0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,2,2,2,2,0,0,0,1,1,1,1,1,0,0,0],
    [0,2,2,2,2,0,0,0,1,1,1,1,1,0,0,0],
    [0,2,2,2,0,0,0,1,1,1,1,1,1,0,0,0],
    [0,2,2,0,0,0,1,1,1,1,1,1,1,0,0,0],
    [0,2,2,0,0,0,1,1,1,0,1,1,1,0,0,0],
    [0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0],
    [0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0],
    [0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0],
    [0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0],
    [0,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0],
    [0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0],
    [1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
    [0,0,2,2,2,2,2,0,0,0,1,1,1,0,0,0],
    [0,0,2,2,2,2,2,0,0,0,1,1,1,0,0,0],
    [0,0,2,2,2,2,2,0,0,0,1,1,1,0,0,0],
    [0,0,2,2,2,2,2,0,0,0,1,1,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0]
    ],
    "6": [
    [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0],
    [0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0],
    [0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,1,1,1,0,0,0,2,2,2,2,2,2,0,0],
    [1,1,1,1,0,0,0,0,2,2,2,2,2,2,0,0],
    [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
    [1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0],
    [1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1],
    [1,1,1,1,0,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,1,0,0,0,2,2,0,0,0,0,1,1,1],
    [1,1,1,1,0,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],
    [0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0],
    [0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0],
    [0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0],
    [0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0]
    ],
    "7": [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,1,1,1,1,0],
    [0,2,2,2,2,0,0,0,0,1,1,1,0,0],
    [0,2,2,2,2,0,0,0,1,1,1,1,0,0],
    [0,2,2,2,0,0,0,1,1,1,1,0,0,0],
    [0,2,2,2,0,0,0,1,1,1,1,0,0,0],
    [0,2,2,0,0,0,1,1,1,1,0,0,0,0],
    [0,2,2,0,0,0,1,1,1,0,0,0,0,0],
    [0,2,0,0,0,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,1,1,1,1,0,0,0,2,0,0,0],
    [0,0,0,1,1,1,1,0,0,0,2,0,0,0],
    [0,0,1,1,1,1,1,0,0,0,2,0,0,0],
    [0,0,1,1,1,1,0,0,0,2,2,2,0,0],
    [0,0,1,1,1,1,0,0,0,2,2,2,0,0],
    [0,1,1,1,1,0,0,0,0,2,2,2,0,0],
    [0,1,1,1,1,0,0,0,2,2,2,2,0,0],
    [0,1,1,1,1,0,0,0,2,2,2,2,0,0],
    [0,1,1,1,1,0,0,0,0,0,0,0,0,0]
    ],
    "9": [
    [0,0,0,1,1,1,1,1,1,1,1,0,0,0,0],
    [0,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,0,1,1,1,1,1,1,0,0],
    [1,1,1,1,0,0,0,0,0,1,1,1,1,1,0],
    [1,1,1,0,0,0,0,0,0,0,1,1,1,1,0],
    [1,1,1,0,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,0,0,0,2,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,2,2,0,0,0,1,1,1],
    [1,1,1,0,0,0,2,2,0,0,0,1,1,1,1],
    [1,1,1,0,0,0,2,0,0,0,0,1,1,1,1],
    [1,1,1,1,0,0,0,0,0,0,1,1,1,1,1],
    [1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],
    [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,1,1,1,1,1,1,1,1,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1],
    [0,2,2,2,2,2,2,0,0,0,0,1,1,1,1],
    [0,2,2,2,2,2,2,0,0,0,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,0,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0],
    [1,1,1,1,1,0,1,1,1,1,1,1,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0]
    ],
    "F": [
    [0,0,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,2,2,2,2,0,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,2,2,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,2,2,0,1,1,1,1,1,1,1,1,1,1,1,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,2,2,0,1,1,1,0,0,2,0,2,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,1,0,0,2,0,2,0,0,0,0]
    ],
    "J": [
    [2,0,2,0,2,0,0,1,1,1,0,0,2,0,2],
    [2,0,2,0,2,0,0,1,1,1,0,0,2,0,2],
    [2,0,2,0,2,0,0,1,1,1,0,0,2,0,2],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,2,0,2,0,0,1,1,1,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,0,0,0],
    [1,1,1,0,1,1,1,1,1,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,0,0,2,2],
    [1,1,1,1,1,1,1,0,0,0,0,2,2]
    ],
    "T": [
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,2,2,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,2,2,2,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,2,2,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    [0,0,0,0,2,2,0,0,1,1,1,0,0,2,2,0,0,0,0],
    [0,0,0,2,2,2,0,0,1,1,1,0,0,2,2,2,0,0,0],
    
    [0,2,2,2,3,4,0,0,0,0,0,0,0,0,2,2,2,2,2],
    [0,2,2,2,3,4,4,0,0,0,0,0,2,2,2,2,2,2,2],
    [0,2,2,2,3,4,4,2,2,2,2,2,2,2,2,2,2,2,2],
    ],
}

getPixelMapFromId = function(img) {
    var canvas;
    if(!canvas) {
        canvas = document.createElement('canvas');
        canvas.width = 170;
        canvas.height = 50;
        canvas.getContext('2d').drawImage(img, 0, 0, 170, 50);
    }
    var pixelMap = [];
    for (var i = 0; i < 50; i++) {
        var temp = [];
        for (var k = 0; k < 170; k++) {
            temp.push(Boolean(canvas.getContext('2d').getImageData(k, i, 1, 1).data[3]) ? 1 : 0);
        };
        pixelMap.push(temp);
    };
    return pixelMap;
};

function skip(start, end, y) {
    var flag = 0;
    for (var i = 0; i < start.length; i++) {
        if (y >= start[i] && y <= end[i]) {
            flag = 1;
            break;
        }
    }
    return flag;
};

function match_mask(rx, ry, image, mask, tempMask) {
    var flag = 1;
    var breakflag = 0;
    var height = mask.length;
    var width = mask[0].length;
    var count = 0;
    var invertCount = 0;
    var invertTotal = 0;
    var maskCount = 0;
    var maskTotal = 0;
    for (var x = 0; x < height; x++) {
        for (var y = 0; y < width; y++) {
            try {
                if (mask[x][y] == 1) {
                    if (image[rx+x][ry+y] == 1) {
                        if (tempMask[rx+x][ry+y] == 0) {
                            count = count + 1;
                            maskCount = maskCount + 1;
                            maskTotal = maskTotal + 1;
                            continue;
                        }
                        else {
                            maskTotal = maskTotal + 1;
                        }
                    }
                    else {
                        flag = 0;
                        breakflag = 1;
                        break;
                    }

                }
                else if (mask[x][y] >= 2) {
                    if (image[rx+x][ry+y] == 0) {
                        invertTotal = invertTotal + mask[x][y] - 1;
                        invertCount = invertCount + mask[x][y] - 1;
                    }
                    else {
                        invertTotal = invertTotal + mask[x][y] - 1;
                    }
                }
                else {
                    continue;
                }
            }
            catch(e) {
                flag = 0;
                breakflag = 1;
                break;
            }
        }
        if(breakflag) {
            break;
        }
    }
    if (count == 0){
        flag = 0;
    }
    if ((invertCount/invertTotal+0.0)<invertThreshold) {
        flag = 0;
    }
    if ((maskCount/maskTotal+0.0)<maskThreshold) {
        flag = 0;
    }
    if (flag) {
        for (var x = 0; x < height; ++x) {
            for (var y = 0; y < width; ++y) {
                tempMask[rx + x][ry + y] = 1;
            }
        }
    }
    return flag;
}

var getCaptcha = function(img) {
    skipstart = [];
    skipend = [];
    sorter = [];
    captcha = [];
    //console.log(img.length);
    //console.log(img[0].length);
    var tempMask = [];
    for (var l = 0; l < img.length; ++l) {
        var tt = [];
        for (var m = 0; m < img[0].length; ++m) {
            tt.push(0);
        }
        tempMask.push(tt);
    }
    var skipDubious = false;
    dubies = [["J", "T"],["T", "F"]];

    for (var k = 0; k < dubies.length; k++) {
        var currDubi = dubies[k];
        var dubiCount = 0;

        for (var i = 0; i < currDubi.length; i++) {
            var mask = keys[currDubi[i]];

            for (x = 0; x < img.length; ++x) {
                for (y = 0; y < img[0].length; ++y) {
                    if (match_mask(x, y, img, mask, tempMask)) {
                        dubiCount = dubiCount + 1;
                        tempMask = [];
                        for (var l = 0; l < img.length; ++l) {
                            var tt = [];
                            for (var m = 0; m < img[0].length; ++m) {
                                tt.push(0);
                            }
                            tempMask.push(tt);
                        }
                    }
                }
            }
        }
        
        if (dubiCount >= currDubi.length) {
            skipDubious = true;
            break;
        }
    }
    tempMask = [];
    for (var l = 0; l < img.length; ++l) {
        var tt = [];
        for (var m = 0; m < img[0].length; ++m) {
            tt.push(0);
        }
        tempMask.push(tt);
    }
    if(!skipDubious) {
        for(var k in keys) {
            var mask = keys[k];
            f = 0;
            for (x = 0; x < img.length; ++x) {
                for (y = 0; y < img[0].length; ++y) {
                    // if (skip(skipstart, skipend, y))
                    //     continue;
                    // else {
                        if (match_mask(x, y, img, mask, tempMask)) {
                            skipstart.push(y+2);
                            skipend.push(y + mask[0].length - 2);
                            sorter.push(y);
                            captcha[y]=k;
                            f = f + 1;
                        }
                    // }
                }
            }
            if (f == 5)
                break;
        }
        var res = "";
        for (var i = 0; i < captcha.length; i++) {
            if(captcha[i]!=null) {
                res = res + captcha[i];
            }
        }
        //console.log(res);
        return res;
    }
    else
        return "";
    
};
        
function prettyPrint(arr) {
    var s = "";
    for (var i = 0; i < arr.length; i++) {
        var temp = arr[i];
        for (var k = 0; k < temp.length; k++) {
            s = s + temp[k];
        };
        s = s + "\n";
    };
    console.log(s);
}

function addCredits() {
    if(document.getElementById("credit"))
    {}
    else
    {
        
        var para = document.createElement("P");
        var aTag1 = document.createElement('a');
        aTag1.setAttribute('href',"https://github.com/karthikb351/AutoCaptcha-for-IRCTC");
        aTag1.innerHTML = "AutoCaptcha";
        aTag1.style.cssText="font-size: 10px;";
        var t = document.createTextNode(" - with ♥, ");
        var aTag2 = document.createElement('a');
        aTag2.setAttribute('href',"https://twitter.com/karthikb351");
        aTag2.innerHTML = "Karthik Balakrishnan";
        aTag2.style.cssText="font-size: 10px;";
        para.style.cssText=" font-size: 10px; text-align: center; margin-top: 0px; ";
        para.setAttribute("id", "credit");
        para.appendChild(aTag1);
        para.appendChild(t);
        para.appendChild(aTag2);
        if(isLogin()) {
            var textbox = document.getElementById("cimage");
            textbox.parentElement.appendChild(para);
        }
        else {
            var textbox = document.getElementById("j_captcha");
            textbox.parentNode.insertBefore(para, textbox.nextSibling);

        }
    }
}


function loaded() {

    //console.log("AutoCaptcha for IRCTC");
    var img = document.getElementById('cimage');
    var startTime=new Date().getTime();
    var pixMap=getPixelMapFromId(img);
    var captcha=getCaptcha(pixMap);
    var endTime=new Date().getTime();
    //console.info(captcha);
    // if(captcha.length==5)
    // {
        //console.info("Parsed Captcha "+captcha+" in "+(endTime-startTime)+" milliseconds");
    if (captcha.length==5) {
        var textbox = document.getElementById('lool');
        textbox.value = captcha;
        results.push({
            'captcha':captcha,
            'idx': currentCaptcha
        });
        skipped = 0;
    }
    else {
        skipped = skipped + 1;
        newCap();
    }
    // currentCaptcha = currentCaptcha + 1;
    // if(currentCaptcha<finalCaptchaCount) {
    //     loadImage(currentCaptcha);
    // }
    // else {
    //     var s = score(results);
    //     metaResults.push({
    //         'score': s,
    //         'negatives': negatives.length,
    //         'falsePositives': falsePositives.length,
    //         'maskThreshold': maskThreshold,
    //         'invertThreshold': invertThreshold
    //     });
    //     console.log(s+" for M:"+maskThreshold + " I:"+invertThreshold)
    //     if (invertThreshold < (finalInvertThreshold-(stepInvertThreshold/2.0))) {
    //         invertThreshold = invertThreshold + stepInvertThreshold;
    //         currentCaptcha = initCaptchaCount;
    //         loadImage(currentCaptcha);
    //     }
    //     else if (maskThreshold < (finalMaskThreshold-(stepMaskThreshold/2.0))) {
    //         invertThreshold = initInvertThreshold;
    //         maskThreshold = maskThreshold + stepMaskThreshold;
    //         currentCaptcha = initCaptchaCount;
    //         loadImage(currentCaptcha);
    //     }
    //     else {
    //         console.log("Final");
    //         console.log(finalScore(metaResults));
    //         console.log(falsePositives);
    //         var freq = {};
    //         for (var i = 0; i < falsePositives.length; i++) {
    //             for (var k = 0; k < falsePositives[i]['got'].length; k++) {
    //                 if(falsePositives[i]['got'][k]!=falsePositives[i]['expected'][k])
    //                     if(freq[falsePositives[i]['got'][k]]) {
    //                         if(freq[falsePositives[i]['got'][k]][falsePositives[i]['expected'][k]])
    //                             freq[falsePositives[i]['got'][k]][falsePositives[i]['expected'][k]] = freq[falsePositives[i]['got'][k]][falsePositives[i]['expected'][k]] + 1;
    //                         else
    //                             freq[falsePositives[i]['got'][k]][falsePositives[i]['expected'][k]] = 1;
    //                     }
    //                     else
    //                     {
    //                         freq[falsePositives[i]['got'][k]] = {}
    //                         freq[falsePositives[i]['got'][k]][falsePositives[i]['expected'][k]] = 1;
    //                     }

    //             }
    //         }
    //         console.log(freq);
    //     }
    // }
    // }
    // else
    // {
    //     console.warn("Error");
    // }

    //console.log("Made with ♥, Karthik Balakrishnan");
    //console.log("http://github.com/karthikb351/AutoCaptcha-for-IRCTC");
}

var finalScore = function(metaRes) {
    var msIdx = 0;
    var msResS = 0.0;
    for (var i = 0; i < metaRes.length; i++) {
        if(metaRes[i]['score'] > msResS) {
            msIdx = i;
            msResS = metaRes[i]['score'];
        }
    }
    return metaRes[msIdx];
}

var score = function(res) {
    var ss = 0;
    for (var i = 0; i < res.length; i++) {
        var r=res[i];

        // With solutions 
        // if(r.captcha == sols[r.idx]) {
        //     ss = ss + 1;
        // }
        // else {
        //     if(r.captcha.length == 5){
        //         falsePositives.push({
        //             'number': r.idx,
        //             'got': r.captcha,
        //             'expected': sols[r.idx]
        //         });
        //     }
        //     else {
        //         negatives.push({
        //             'number': r.idx,
        //             'got': r.captcha,
        //             'expected': sols[r.idx]
        //         });
        //     }
        // }
        

        // Without solutions
        if(r.captcha.length == 5)
            ss = ss + 1;
        else
            negatives.push({
                'number': r.idx,
                'got': r.captcha
            });



    }
    if (res.length == 0)
        return 0.0;
    return (ss+0.0)/(res.length);
}

function getRand(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}


var img = document.getElementById('cimage');
var count = document.getElementById('count');
var newCap = function() {
    img.src = 'samples/tatkal/'+getRand(1,99)+'.png';
    if (img.complete) {
        loaded();
    } else {
        img.addEventListener('load', loaded);
    }
};

var falsePositives = [];
var negatives = [];
var skipped = 0;

var initCaptchaCount = 0;
var finalCaptchaCount = 998;
var currentCaptcha = initCaptchaCount;

var initInvertThreshold = 0.3;
var stepInvertThreshold = 0.1;
var finalInvertThreshold = 0.3;

var initMaskThreshold = 0.5;
var stepMaskThreshold = 0.1;
var finalMaskThreshold = 0.5;

var invertThreshold = initInvertThreshold;
var maskThreshold = initMaskThreshold;

var results = [];
var metaResults = [];

var newBtn = document.getElementById('reload');
newBtn.addEventListener('click', function(btn) {
    newCap();
});

newCap();
